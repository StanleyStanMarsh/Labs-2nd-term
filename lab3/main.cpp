// Темы:
// Перегрузка операторов.
// Встроенные объекты
//#include "stdafx.h"	//если Вы используете предкомпиляцию заголовочных
//файлов, раскомментируйте эту строчку
#include <iostream>
#include "myString.h"
#include "Point.h"
#include "BD.h"


int main()
{
	//Задание 1.Перегрузка операторов.

	//Подключите к проекту файлы MyString.cpp и MyString.h
	//класса MyString, разработанного Вами на предыдущем занятии
	//9a. Перегрузите оператор присваивания для класса MyString
	//Проверьте корректность работы перегруженного оператора

	{
        std::cout << "\n______Task #1______\n";
		MyString s1("AAA"), s2;
		s2 = s1;
        std::cout << s1.GetString() << ' ' << s2.GetString() << '\n';
		s1 = "CCC";
		s2 = MyString("tmp");
		s1 = s1;
        std::cout << s1.GetString() << ' ' << s2.GetString() << '\n';
	}


	//2.Создайте класс Point, который будет содержать координаты
	//"точки". Объявите конструктор (конструкторы) класса

	//2b. "Перегрузите" оператор += так, чтобы при выполнении
	//операции типа pt2+=pt1; складывались
	//одноименные переменные объектов pt1 и pt2, а сумма
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2+=1; обе переменные объекта pt2 увеличивались на
	// указанное значение
	//a) с помощью метода класса (оператор +=)
	//б) с помощью глобальной функции (оператор -=)
	//Проверьте корректность работы перегруженного оператора
    {
        std::cout << "\n______Task #2______\n";

        Point pt1(1, 1);
        Point pt2(2, 2);

        pt2 -= pt1;
        pt2 -= 1;

        pt2 += pt1;
        pt2 += 1;
        Point pt3(3, 3);
        pt2 += pt1 += pt3;
    }

	//Задание 2c. Перегрузите оператор +/-
	//a)с помощью методов класса (оператор +)
	//б) с помощью  глобальных функций (оператор -)
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
    {
        Point pt1(1, 1);
        Point pt2(2, 2);
        Point pt3;

        pt3 = pt1 + 5;
        pt3 = 2 + pt1;
        pt3 = pt1 + pt2;

        pt3 = pt1 - 5;
        pt3 = pt1 - pt2;

            //Задание 1d. Перегрузите унарный оператор +/-
        pt3 = -pt2;
        pt3 = +pt1;
        std::cout << '\n';
    }

	//Задание 2d. Перегрузите оператор << (вывода в поток) для
	//класса MyString таким образом, чтобы при выполнении приведенной строки
	//на экран было выведено:
	//contents:  "QWERTY"

	MyString s("QWERTY");
	std::cout << s << std::endl;


//Задание 2e*. Перегрузите операторы + и += для класса MyString таким образом,
  //чтобы происходила конкатенация строк
	MyString s1("QWERTY"), s2("AAA"), s3, s4("BBB");
	s3 = s1+s2;
	s4 += s1;
    std::cout << s3 << ' ' << s4 << std::endl;

    //Задание 3. Разработать "базу данных" о сотрудниках посредством ассоциативного
    //массива. Ключом является фамилия (ключ в задании уникален, поэтому нескольких Ивановых
    //в базе быть не может), а данными: пол, возраст, должность, зарплата...
    //Реализуйте:
    //добавление сотрудников в базу
    //исключение
    //вывод информации о конкретном сотруднике
    //вывод всей (или интересующей) информации о всех сотрудниках
    //Например:
    std::cout << "\n______Task #3______\n";

    BD bd;	//создание пустой базы
    bd["Ivanov"] = Data(30, Male, 12, "mailman");	//если Ivanov-а в базе еще нет, то
                    //добавление, если уже есть, то замена его реквизитов
    bd["Lenin"] = Data(INT32_MAX, Male, 0, "chief");
    bd["Musk"] = Data(50, Male, 1200, "engineer");
    bd["test"];
    bd["test2"];
    bd["test3"];
    bd.Delete("Morgenshtern");
    bd.Delete("Musk");
    bd.Delete("test2");
    bd.Delete("test3");
    std::cout << "Lenin:\n" << bd["Lenin"] << '\n';
    bd.Surnames();
    std::cout << '\n';
    std::cout << bd;	//вывод информации обо всех сотрудниках
    
    //А также:
    BD bdnew = bd;

    bdnew = bd;
//
//    //А также семантику перемещения:
    BD bdmove = std::move(bdnew);
    std::cout << "=====Moved=====\n" << bdmove;

    return 0;
}//endmain

